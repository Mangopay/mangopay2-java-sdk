plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'commons-codec:commons-codec:1.15'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.32'
}

test {
    enabled = true
    exclude 'com/mangopay/core/BankingAliasApiImplTest.class'
    systemProperty "https.protocols", "TLSv1.2,TLSv1.1,TLSv1"
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
    }
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

group = 'com.mangopay'
version = '2.52.2'
sourceCompatibility = '1.7'

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId 'com.mangopay'
                artifactId 'mangopay2-java-sdk'
                version '2.52.2'

                from(components.java)

                artifact sourceJar
                artifact javadocJar

                description = 'Java SDK for Mangopay'
                name = 'mangopay2-java-sdk'
                url = 'https://github.com/Mangopay/mangopay2-java-sdk'
                organization {
                    name = 'Codegile'
                    url = 'https://www.codegile.com'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'git@github.com:mangopay/mangopay2-java-sdk.git'
                    connection = 'scm:git:git@github.com:mangopay/mangopay2-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:mangopay/mangopay2-java-sdk.git'
                }

                developers {
                    developer {
                        id = 'cata.craciun'
                        name = 'Catalin Craciun'
                        email = 'catalin.craciun@codegile.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "mangopay2-java-sdk"
            url = 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("MAVEN_USERNAME") ?: ""
                password = System.getenv("MAVEN_PASSWORD") ?: ""
            }
        }
    }
}

if (project.hasProperty('signing.keyId')) {
    apply plugin: 'signing'
    signing {
        sign publishing.publications.mavenJava
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

nexusPublishing {
    packageGroup = "com.mangopay"
    repositories {
        sonatype {
            stagingProfileId = "2be9f53d7db009"
            username = project.findProperty("nexusUsername")
            password = project.findProperty("nexusPassword")
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }

    transitionCheckOptions {
        delayBetween.set(java.time.Duration.ofMillis(10000))
    }
}

task updatePropertiesFile {
    doLast {
        logger.quiet('Update Mangopay Properties File')
        def propertyFile = file "src/main/resources/com/mangopay/core/mangopay.properties"
        def props = new Properties()
        propertyFile.withReader { props.load(it) }
        props.setProperty("version", (String) version)
        propertyFile.withWriter { props.store(it, null) }
    }
}

signing {
    if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        sign configurations.archives

        /* Uncomment this if you use shadow in your build process */
        // sign configurations.shadow
    }
}

processResources.dependsOn updatePropertiesFile
